{"ast":null,"code":"var _jsxFileName = \"/home/mauro/\\xC1rea de Trabalho/Projeto07-ReactHTTP-Reques/atv-react/src/Form.js\";\nimport React from 'react'; // import Tabela from './Tabela';\n\nexport default class Form extends React.Component {\n  constructor() {\n    super();\n\n    this.changeCidade = event => {};\n\n    this.state = {\n      cid: '',\n      nome: '',\n      cidades: '',\n      cidade: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch(`http://servicos.cptec.inpe.br/XML/listaCidades?city=${this.state.nome}`, {\n      method: \"GET\"\n    }, {\n      //  mode: 'no-cors',\n      method: 'GET',\n      headers: new Headers({\n        'Accept': 'application/xml',\n        'content-type': 'application/x-www-form-urlencoded',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      })\n    }).then(response => response.arrayBuffer()).then(buffer => {\n      let decoder = new TextDecoder(\"iso-8859-1\");\n      return decoder.decode(buffer);\n    }).then(str => {\n      // console.log(str);\n      let parser = new window.DOMParser();\n      let xml = parser.parseFromString(str, \"text/xml\");\n      let cidades = xml.getElementsByTagName('cidades')[0]; // Obter a tag cidades\n      //            let cidade = xml.getElementsByTagName('cidade')[1]; // Obter a tag cidade\n\n      let nome = xml.getElementsByTagName('nome')[0]; // Obter a tag nome\n\n      let lista = [];\n      cidades.childNodes.forEach((obj, index) => {\n        lista.push(obj.childNodes[0].childNodes[0].nodeValue);\n      });\n      console.log('Cidades: ');\n\n      for (var chave in cidades) console.log(cidades[chave]);\n\n      console.log('Nome: ');\n\n      for (var chave in nome) console.log(nome[chave]); //            console.log('Cidades: '+{cidades});\n      //            console.log('Cidade: '+cidade);\n      //            console.log('Nome: '+nome);\n\n    }).catch(erro => console.log(erro));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }\n    }, \"Nome\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"cid\",\n      value: this.state.cid,\n      onChange: e => this.setState({\n        nome: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, this.state.erroMsg)));\n  }\n\n}","map":{"version":3,"sources":["/home/mauro/Área de Trabalho/Projeto07-ReactHTTP-Reques/atv-react/src/Form.js"],"names":["React","Form","Component","constructor","changeCidade","event","state","cid","nome","cidades","cidade","componentDidMount","fetch","method","headers","Headers","then","response","arrayBuffer","buffer","decoder","TextDecoder","decode","str","parser","window","DOMParser","xml","parseFromString","getElementsByTagName","lista","childNodes","forEach","obj","index","push","nodeValue","console","log","chave","catch","erro","render","submit","e","setState","target","value","erroMsg"],"mappings":"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","sourcesContent":["import React from 'react';\n// import Tabela from './Tabela';\n\nexport default class Form extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            cid: '',\n            nome: '',\n            cidades: '',\n            cidade: ''\n        };\n    }\n\n    componentDidMount() {\n        fetch(`http://servicos.cptec.inpe.br/XML/listaCidades?city=${this.state.nome}`,{method:\"GET\"}, {\n          //  mode: 'no-cors',\n            method: 'GET',\n            headers: new Headers({\n                'Accept': 'application/xml',\n                'content-type': 'application/x-www-form-urlencoded',\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Methods': 'GET, POST, PUT',\n                'Access-Control-Allow-Headers': 'Content-Type',\n            })\n        })\n        .then(response => response.arrayBuffer())\n        .then(buffer => {\n            let decoder = new TextDecoder(\"iso-8859-1\");\n            return decoder.decode(buffer);\n        })\n        .then(str => { // console.log(str);\n            let parser = new window.DOMParser()\n            let xml = parser.parseFromString(str, \"text/xml\");\n            let cidades = xml.getElementsByTagName('cidades')[0]; // Obter a tag cidades\n//            let cidade = xml.getElementsByTagName('cidade')[1]; // Obter a tag cidade\n            let nome = xml.getElementsByTagName('nome')[0]; // Obter a tag nome\n            let lista = [];\n            cidades.childNodes.forEach((obj, index) => {\n                lista.push(obj.childNodes[0].childNodes[0].nodeValue)\n            });\n            console.log('Cidades: ');\n            for (var chave in cidades) console.log(cidades[chave]);\n\n            console.log('Nome: ');\n            for (var chave in nome) console.log(nome[chave]);\n//            console.log('Cidades: '+{cidades});\n//            console.log('Cidade: '+cidade);\n//            console.log('Nome: '+nome);\n        })\n        .catch(erro => console.log(erro) );\n    }\n    \n\n    changeCidade = event => {\n        \n    }\n\n    render() {\n\n        return (\n            <div>\n                <form onSubmit={this.submit} >\n                    <div>\n                        <label>Nome</label>\n                        <input type='text' name='cid' value={this.state.cid}\n                            onChange={e => this.setState({\n                                nome: e.target.value })\n                            }\n                        />\n\n\n                    </div>\n                    <div>\n                        {this.state.erroMsg}\n                    </div>\n                </form>\n\n            </div>\n        );\n   }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}