{"ast":null,"code":"var _jsxFileName = \"/home/mauro/\\xC1rea de Trabalho/Projeto07-ReactHTTP-Reques/atv-react/src/Form.js\";\nimport React from 'react'; // import Tabela from './Tabela';\n\nexport default class Form extends React.Component {\n  constructor() {\n    super();\n\n    this.changeCidade = event => {};\n\n    this.state = {\n      cid: '',\n      nome: '',\n      cidades: '',\n      cidade: ''\n    };\n  }\n\n  componentDidMount() {\n    buscaCidades = e => {\n      this.setState({\n        nome: e.target.value\n      });\n\n      if (e.target.value.length >= 3) {\n        let nome = e.target.value.string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\n        this.setState({\n          erro: ''\n        });\n        fetch(`http://servicos.cptec.inpe.br/XML/listaCidades?city=${nome}`, {\n          method: \"GET\"\n        }, {\n          //  mode: 'no-cors',\n          method: 'GET',\n          headers: new Headers({\n            'Accept': 'application/xml',\n            'content-type': 'application/x-www-form-urlencoded',\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET, POST, PUT',\n            'Access-Control-Allow-Headers': 'Content-Type'\n          })\n        }).then(response => response.arrayBuffer()).then(buffer => {\n          let decoder = new TextDecoder(\"iso-8859-1\");\n          return decoder.decode(buffer);\n        }).then(str => {\n          // console.log(str);\n          let parser = new window.DOMParser();\n          let xml = parser.parseFromString(str, \"text/xml\");\n          let cidades = xml.getElementsByTagName('cidades')[0]; // Obter a tag cidades\n\n          let lista = [];\n          lista.push( /*#__PURE__*/React.createElement(\"option\", {\n            key: \"1\",\n            value: \"\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 24\n            }\n          }, \"Selecione uma cidade\"));\n          cidades.childNodes.forEach((obj, index) => {\n            lista.push( /*#__PURE__*/React.createElement(\"option\", {\n              key: index,\n              value: obj.childNodes[2].childNodes[0].nodeValue,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 28\n              }\n            }, obj.childNodes[0].childNodes[0].nodeValue, \" - \", obj.childNodes[1].childNodes[0].nodeValue));\n          });\n          this.setState({\n            cidades: lista\n          }); //        console.log('Cidades: ');\n        }).catch(erro => console.log(erro));\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    }, \"Nome\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"cid\",\n      value: this.state.cid,\n      onChange: e => this.setState({\n        nome: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, this.state.erroMsg)));\n  }\n\n}","map":{"version":3,"sources":["/home/mauro/Área de Trabalho/Projeto07-ReactHTTP-Reques/atv-react/src/Form.js"],"names":["React","Form","Component","constructor","changeCidade","event","state","cid","nome","cidades","cidade","componentDidMount","buscaCidades","e","setState","target","value","length","string","normalize","replace","erro","fetch","method","headers","Headers","then","response","arrayBuffer","buffer","decoder","TextDecoder","decode","str","parser","window","DOMParser","xml","parseFromString","getElementsByTagName","lista","push","childNodes","forEach","obj","index","nodeValue","catch","console","log","render","submit","erroMsg"],"mappings":"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","sourcesContent":["import React from 'react';\n// import Tabela from './Tabela';\n\nexport default class Form extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            cid: '',\n            nome: '',\n            cidades: '',\n            cidade: ''\n        };\n    }\n\n    componentDidMount() {\n        buscaCidades = e => {\n            this.setState({\n                nome: e.target.value\n            });\n            if (e.target.value.length >= 3) {\n               let nome = e.target.value.string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\")\n               this.setState({erro: ''}); \n\n            fetch(`http://servicos.cptec.inpe.br/XML/listaCidades?city=${nome}`,{method:\"GET\"}, {\n            //  mode: 'no-cors',\n                method: 'GET',\n                headers: new Headers({\n                    'Accept': 'application/xml',\n                    'content-type': 'application/x-www-form-urlencoded',\n                    'Access-Control-Allow-Origin': '*',\n                    'Access-Control-Allow-Methods': 'GET, POST, PUT',\n                    'Access-Control-Allow-Headers': 'Content-Type',\n            })\n        })\n        .then(response => response.arrayBuffer())\n        .then(buffer => {\n            let decoder = new TextDecoder(\"iso-8859-1\");\n            return decoder.decode(buffer);\n        })\n        .then(str => { // console.log(str);\n            let parser = new window.DOMParser()\n            let xml = parser.parseFromString(str, \"text/xml\");\n            let cidades = xml.getElementsByTagName('cidades')[0]; // Obter a tag cidades\n            let lista = [];\n            lista.push(<option key='1' value='' >Selecione uma cidade</option>)\n            cidades.childNodes.forEach((obj, index) => {\n                lista.push(<option key={index} value={obj.childNodes[2].childNodes[0].nodeValue} >{obj.childNodes[0].childNodes[0].nodeValue} - {obj.childNodes[1].childNodes[0].nodeValue}</option>)\n            });\n            this.setState({ cidades: lista});\n    //        console.log('Cidades: ');\n        })\n        .catch(erro => console.log(erro) );\n        }\n    }    \n}\n    changeCidade = event => {\n        \n    }\n\n    render() {\n\n        return (\n            <div>\n                <form onSubmit={this.submit} >\n                    <div>\n                        <label>Nome</label>\n                        <input type='text' name='cid' value={this.state.cid}\n                            onChange={e => this.setState({\n                                nome: e.target.value })\n                            }\n                        />\n\n\n                    </div>\n                    <div>\n                        {this.state.erroMsg}\n                    </div>\n                </form>\n\n            </div>\n        );\n   }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}