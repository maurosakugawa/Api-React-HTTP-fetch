{"ast":null,"code":"var _jsxFileName = \"/home/mauro/\\xC1rea de Trabalho/Projeto07-ReactHTTP-Reques/atv-react/src/Form.js\";\nimport React from 'react'; // import Tabela from './Tabela';\n\nexport default class Form extends React.Component {\n  constructor() {\n    super();\n\n    this.getTempo = sigla => {\n      return {\n        'ec': 'Encoberto com Chuvas Isoladas',\n        'ci': 'Chuvas Isoladas',\n        'c': 'Chuva',\n        'in': 'Instável',\n        'pp': 'Poss. de Pancadas de Chuva',\n        'cm': 'Chuva pela Manhã',\n        'cn': 'Chuva a Noite',\n        'pt': 'Pancadas de Chuva a Tarde',\n        'pm': 'Pancadas de Chuva pela Manhã',\n        'np': 'Nublado e Pancadas de Chuva',\n        'pc': 'Pancadas de Chuva',\n        'pn': 'Parcialmente Nublado',\n        'cv': 'Chuvisco',\n        'ch': 'Chuvoso',\n        't': 'Tempestade',\n        'ps': 'Predomínio de Sol',\n        'e': 'Encoberto',\n        'n': 'Nublado',\n        'cl': 'Céu Claro',\n        'nv': 'Nevoeiro',\n        'g': 'Geada',\n        'ne': 'Neve',\n        'nd': 'Não Definido',\n        'pnt': 'Pancadas de Chuva a Noite',\n        'psc': 'Possibilidade de Chuva',\n        'pcm': 'Possibilidade de Chuva pela Manhã',\n        'pct': 'Possibilidade de Chuva a Tarde',\n        'pcn': 'Possibilidade de Chuva a Noite',\n        'npt': 'Nublado com Pancadas a Tarde',\n        'npn': 'Nublado com Pancadas a Noite',\n        'ncn': 'Nublado com Poss. de Chuva a Noite',\n        'nct': 'Nublado com Poss. de Chuva a Tarde',\n        'ncm': 'Nubl. c/ Poss. de Chuva pela Manhã',\n        'npm': 'Nublado com Pancadas pela Manhã',\n        'npp': 'Nublado com Possibilidade de Chuva',\n        'vn': 'Variação de Nebulosidade',\n        'ct': 'Chuva a Tarde',\n        'ppn': 'Poss. de Panc. de Chuva a Noite',\n        'ppt': 'Poss. de Panc. de Chuva a Tarde',\n        'ppm': 'Poss. de Panc. de Chuva pela Manhã'\n      }[sigla];\n    };\n\n    this.formatData = data => {\n      let d = data.split('-');\n      return d[2] + '/' + d[1] + '/' + d[0];\n    };\n\n    this.localidades = e => {\n      if (e.target.value.length >= 3) {\n        let nome = e.target.value.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\n        this.setState({\n          erro: ''\n        });\n        fetch(`http://servicos.cptec.inpe.br/XML/listaCidades?city=${nome}`, {\n          method: \"GET\"\n        }, {\n          //  mode: 'no-cors',\n          mode: 'cors',\n          method: 'GET',\n          headers: new Headers({\n            'Accept': 'application/xml',\n            'content-type': 'application/x-www-form-urlencoded',\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET, POST, PUT',\n            'Access-Control-Allow-Headers': 'Content-Type'\n          })\n        }).then(response => response.arrayBuffer()).then(buffer => {\n          let decoder = new TextDecoder(\"iso-8859-1\");\n          return decoder.decode(buffer);\n        }).then(str => {\n          // console.log(str);\n          let parser = new window.DOMParser();\n          let xml = parser.parseFromString(str, \"text/xml\");\n          let cidades = xml.getElementsByTagName('cidades')[0]; // Obter a tag cidades\n\n          let lista = [];\n          lista.push( /*#__PURE__*/React.createElement(\"option\", {\n            key: \"1\",\n            value: \"\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 24\n            }\n          }, \"Selecione uma cidade\"));\n          cidades.childNodes.forEach((obj, index) => {\n            lista.push( /*#__PURE__*/React.createElement(\"option\", {\n              key: index,\n              value: obj.childNodes[2].childNodes[0].nodeValue,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 28\n              }\n            }, obj.childNodes[0].childNodes[0].nodeValue, \" - \", obj.childNodes[1].childNodes[0].nodeValue));\n          });\n          this.setState({\n            cidades: lista\n          });\n          console.log('Cidades: ' + cidades);\n        }).catch(erro => console.log(erro));\n      }\n    };\n\n    this.clima = e => {\n      if (e.target.value !== '') {\n        fetch(`http://servicos.cptec.inpe.br/XML/cidade/4963/previsao.xml`, {\n          method: 'GET'\n        }).then(response => response.arrayBuffer()).then(buffer => {\n          let decoder = new TextDecoder(\"iso-8859-1\");\n          return decoder.decode(buffer);\n        }).then(temp => {\n          console.log(temp);\n        });\n      }\n    };\n\n    this.state = {\n      //            cid: '',\n      nome: '',\n      cidades: '',\n      cidade: '',\n      previsao: '',\n      erroMsg: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 25\n      }\n    }, \"Nome\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"cid\",\n      value: this.state.cid,\n      onChange: e => this.setState({\n        nome: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }\n    }, this.state.erroMsg)));\n  }\n\n}","map":{"version":3,"sources":["/home/mauro/Área de Trabalho/Projeto07-ReactHTTP-Reques/atv-react/src/Form.js"],"names":["React","Form","Component","constructor","getTempo","sigla","formatData","data","d","split","localidades","e","target","value","length","nome","normalize","replace","setState","erro","fetch","method","mode","headers","Headers","then","response","arrayBuffer","buffer","decoder","TextDecoder","decode","str","parser","window","DOMParser","xml","parseFromString","cidades","getElementsByTagName","lista","push","childNodes","forEach","obj","index","nodeValue","console","log","catch","clima","temp","state","cidade","previsao","erroMsg","render","submit","cid"],"mappings":"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","sourcesContent":["import React from 'react';\n// import Tabela from './Tabela';\n\nexport default class Form extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n//            cid: '',\n            nome: '',\n            cidades: '',\n            cidade: '',\n            previsao: '',\n            erroMsg: ''\n        };\n    }\n\n    getTempo = sigla => {\n        return {\n        'ec': 'Encoberto com Chuvas Isoladas',\n        'ci': 'Chuvas Isoladas',\n        'c': 'Chuva',\n        'in': 'Instável',\n        'pp': 'Poss. de Pancadas de Chuva',\n        'cm': 'Chuva pela Manhã',\n        'cn': 'Chuva a Noite',\n        'pt': 'Pancadas de Chuva a Tarde',\n        'pm': 'Pancadas de Chuva pela Manhã',\n        'np': 'Nublado e Pancadas de Chuva',\n        'pc': 'Pancadas de Chuva',\n        'pn': 'Parcialmente Nublado',\n        'cv': 'Chuvisco',\n        'ch': 'Chuvoso',\n        't': 'Tempestade',\n        'ps': 'Predomínio de Sol',\n        'e': 'Encoberto',\n        'n': 'Nublado',\n        'cl': 'Céu Claro',\n        'nv': 'Nevoeiro',\n        'g': 'Geada',\n        'ne': 'Neve',\n        'nd': 'Não Definido',\n        'pnt': 'Pancadas de Chuva a Noite',\n        'psc': 'Possibilidade de Chuva',\n        'pcm': 'Possibilidade de Chuva pela Manhã',\n        'pct': 'Possibilidade de Chuva a Tarde',\n        'pcn': 'Possibilidade de Chuva a Noite',\n        'npt': 'Nublado com Pancadas a Tarde',\n        'npn': 'Nublado com Pancadas a Noite',\n        'ncn': 'Nublado com Poss. de Chuva a Noite',\n        'nct': 'Nublado com Poss. de Chuva a Tarde',\n        'ncm': 'Nubl. c/ Poss. de Chuva pela Manhã',\n        'npm': 'Nublado com Pancadas pela Manhã',\n        'npp': 'Nublado com Possibilidade de Chuva',\n        'vn': 'Variação de Nebulosidade',\n        'ct': 'Chuva a Tarde',\n        'ppn': 'Poss. de Panc. de Chuva a Noite',\n        'ppt': 'Poss. de Panc. de Chuva a Tarde',\n        'ppm': 'Poss. de Panc. de Chuva pela Manhã'\n        }[sigla];\n    }\n\n    formatData = data => {\n        let d = data.split('-');\n        return d[2] + '/' + d[1] + '/' + d[0];\n    }\n\n//    componentDidMount() {\n    localidades = e => {\n        if (e.target.value.length >= 3) {\n            let nome = e.target.value.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\n            this.setState({erro: ''});\n        fetch(`http://servicos.cptec.inpe.br/XML/listaCidades?city=${nome}`,{method:\"GET\"}, {\n          //  mode: 'no-cors',\n            mode: 'cors',\n            method: 'GET',\n            headers: new Headers({\n                'Accept': 'application/xml',\n                'content-type': 'application/x-www-form-urlencoded',\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Methods': 'GET, POST, PUT',\n                'Access-Control-Allow-Headers': 'Content-Type',\n            })\n        })\n        .then(response => response.arrayBuffer())\n        .then(buffer => {\n            let decoder = new TextDecoder(\"iso-8859-1\");\n            return decoder.decode(buffer);\n        })\n        .then(str => { // console.log(str);\n            let parser = new window.DOMParser()\n            let xml = parser.parseFromString(str, \"text/xml\");\n            let cidades = xml.getElementsByTagName('cidades')[0]; // Obter a tag cidades\n            let lista = [];\n            lista.push(<option key='1' value='' >Selecione uma cidade</option>)\n            cidades.childNodes.forEach((obj, index) => {\n                lista.push(<option key={index} value={obj.childNodes[2].childNodes[0].nodeValue}>{obj.childNodes[0].childNodes[0].nodeValue} - {obj.childNodes[1].childNodes[0].nodeValue}</option>)\n            });\n            this.setState({cidades: lista});\n            console.log('Cidades: '+cidades);\n\n        })\n        .catch(erro => console.log(erro) );\n    }\n}   \n\n    clima = e => {\n        if (e.target.value !== '') {\n\n            fetch(`http://servicos.cptec.inpe.br/XML/cidade/4963/previsao.xml`, {method:'GET'})\n            .then(response => response.arrayBuffer())\n            .then(buffer => {\n                let decoder = new TextDecoder(\"iso-8859-1\");\n                return decoder.decode(buffer);\n            })\n            .then(temp => {  console.log(temp);})\n        }  \n    }\n\n    render() {\n\n        return (\n            <div>\n                <form onSubmit={this.submit} >\n                    <div>\n                        <label>Nome</label>\n                        <input type='text' name='cid' value={this.state.cid}\n                            onChange={e => this.setState({\n                                nome: e.target.value })\n                            }\n                        />\n\n\n                    </div>\n                    <div>\n                        {this.state.erroMsg}\n                    </div>\n                </form>\n\n            </div>\n        );\n   }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}