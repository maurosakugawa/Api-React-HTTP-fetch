{"ast":null,"code":"var _jsxFileName = \"/home/mauro/\\xC1rea de Trabalho/Projeto07-ReactHTTP-Reques/atv-react/src/Form.js\";\nimport React from 'react';\nimport './index.css';\nexport default class Form extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getTempo = sigla => {\n      return {\n        'ec': 'Encoberto com Chuvas Isoladas',\n        'ci': 'Chuvas Isoladas',\n        'c': 'Chuva',\n        'in': 'Instável',\n        'pp': 'Poss. de Pancadas de Chuva',\n        'cm': 'Chuva pela Manhã',\n        'cn': 'Chuva a Noite',\n        'pt': 'Pancadas de Chuva a Tarde',\n        'pm': 'Pancadas de Chuva pela Manhã',\n        'np': 'Nublado e Pancadas de Chuva',\n        'pc': 'Pancadas de Chuva',\n        'pn': 'Parcialmente Nublado',\n        'cv': 'Chuvisco',\n        'ch': 'Chuvoso',\n        't': 'Tempestade',\n        'ps': 'Predomínio de Sol',\n        'e': 'Encoberto',\n        'n': 'Nublado',\n        'cl': 'Céu Claro',\n        'nv': 'Nevoeiro',\n        'g': 'Geada',\n        'ne': 'Neve',\n        'nd': 'Não Definido',\n        'pnt': 'Pancadas de Chuva a Noite',\n        'psc': 'Possibilidade de Chuva',\n        'pcm': 'Possibilidade de Chuva pela Manhã',\n        'pct': 'Possibilidade de Chuva a Tarde',\n        'pcn': 'Possibilidade de Chuva a Noite',\n        'npt': 'Nublado com Pancadas a Tarde',\n        'npn': 'Nublado com Pancadas a Noite',\n        'ncn': 'Nublado com Poss. de Chuva a Noite',\n        'nct': 'Nublado com Poss. de Chuva a Tarde',\n        'ncm': 'Nubl. c/ Poss. de Chuva pela Manhã',\n        'npm': 'Nublado com Pancadas pela Manhã',\n        'npp': 'Nublado com Possibilidade de Chuva',\n        'vn': 'Variação de Nebulosidade',\n        'ct': 'Chuva a Tarde',\n        'ppn': 'Poss. de Panc. de Chuva a Noite',\n        'ppt': 'Poss. de Panc. de Chuva a Tarde',\n        'ppm': 'Poss. de Panc. de Chuva pela Manhã'\n      }[sigla];\n    };\n\n    this.formatData = data => {\n      let d = data.split('-');\n      return d[2] + '/' + d[1] + '/' + d[0];\n    };\n\n    this.fetchCidades = e => {\n      this.setState({\n        nome: e.target.value\n      });\n\n      if (e.target.value.length >= 3) {\n        e.preventDefault();\n        let nome = e.target.value.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\n        this.setState({\n          erro: ''\n        });\n        fetch(`http://servicos.cptec.inpe.br/XML/listaCidades?city=${nome}`, {\n          method: \"GET\"\n        }, {\n          mode: 'cors',\n          method: 'GET',\n          headers: new Headers({\n            'Accept': 'application/xml',\n            'content-type': 'application/x-www-form-urlencoded',\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET, POST, PUT',\n            'Access-Control-Allow-Headers': 'Content-Type'\n          })\n        }).then(response => response.arrayBuffer()).then(buffer => {\n          let decoder = new TextDecoder(\"iso-8859-1\");\n          return decoder.decode(buffer);\n        }).then(str => {\n          // console.log(str);\n          let parser = new window.DOMParser();\n          let xml = parser.parseFromString(str, \"text/xml\");\n          let cidades = xml.getElementsByTagName('cidades')[0]; // Obter a tag cidades\n\n          let ID = xml.getElementsByTagName('id')[0];\n          console.log(ID);\n          let lista = [];\n          lista.push( /*#__PURE__*/React.createElement(\"option\", {\n            key: \"-i\",\n            value: \"\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 32\n            }\n          }, \"Selecione\"));\n          cidades.childNodes.forEach((obj, index) => {\n            return lista.push( /*#__PURE__*/React.createElement(\"option\", {\n              key: index,\n              value: obj.childNodes[2].childNodes[0].nodeValue,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 43\n              }\n            }, obj.childNodes[0].childNodes[0].nodeValue, \" - \", obj.childNodes[1].childNodes[0].nodeValue));\n          });\n          this.setState({\n            cidades: lista\n          });\n        }).catch(erro => console.log(erro));\n      }\n    };\n\n    this.fetchClima = e => {\n      console.log(e.target.value);\n\n      if (e.target.value !== '') {\n        fetch(`http://servicos.cptec.inpe.br/XML/cidade/${e.target.value}/previsao.xml`, {\n          method: 'GET'\n        }).then(response => response.arrayBuffer()).then(buffer => {\n          let decoder = new TextDecoder(\"iso-8859-1\");\n          return decoder.decode(buffer);\n        }).then(str => {\n          // console.log(str);\n          let parser = new window.DOMParser();\n          let xml = parser.parseFromString(str, \"text/xml\"); //                     console.log(xml);\n\n          var cidade = xml.getElementsByTagName('nome')[0].firstChild.textContent;\n          console.log(\"cidade \" + cidade);\n          let UF = xml.getElementsByTagName('uf')[0].firstChild.textContent;\n          console.log(\"UF \" + UF);\n          let diaSearch = this.formatData(xml.getElementsByTagName('atualizacao')[0].firstChild.textContent);\n          console.log(\"Dia \" + diaSearch);\n          let hoje = this.formatData(xml.getElementsByTagName('previsao')[0].getElementsByTagName('dia')[0].firstChild.nodeValue);\n          console.log(\"Hoje \" + hoje);\n          let condhoje = this.getTempo(xml.getElementsByTagName('previsao')[0].getElementsByTagName('tempo')[0].firstChild.nodeValue);\n          console.log(\"condhoje \" + condhoje);\n          let maxhoje = xml.getElementsByTagName('previsao')[0].getElementsByTagName('maxima')[0].firstChild.nodeValue;\n          console.log(\"max \" + maxhoje);\n          let minhoje = xml.getElementsByTagName('previsao')[0].getElementsByTagName('minima')[0].firstChild.nodeValue;\n          console.log(\"min \" + minhoje);\n          let iuvHoje = xml.getElementsByTagName('previsao')[0].getElementsByTagName('iuv')[0].firstChild.nodeValue;\n          console.log(\"iuv \" + iuvHoje);\n          let amanha = xml.getElementsByTagName('previsao')[1].getElementsByTagName('dia')[0].firstChild.nodeValue;\n          console.log(\"amanhã \" + amanha);\n          let condAmanha = this.getTempo(xml.getElementsByTagName('previsao')[0].getElementsByTagName('tempo')[0].firstChild.nodeValue);\n          console.log(\"condAmanhã \" + condAmanha);\n          let maxAmanha = xml.getElementsByTagName('previsao')[0].getElementsByTagName('maxima')[0].firstChild.nodeValue;\n          console.log(\"max \" + maxAmanha);\n          let minAmanha = xml.getElementsByTagName('previsao')[0].getElementsByTagName('minima')[0].firstChild.nodeValue;\n          console.log(\"min \" + minAmanha);\n          let iuvAmanha = xml.getElementsByTagName('previsao')[0].getElementsByTagName('iuv')[0].firstChild.nodeValue;\n          console.log(\"iuv \" + iuvAmanha);\n          /*                    condicao.childNodes.forEach((obj, index) => {\n                                  let lista = [];\n                                  lista.push(\n                                      <option key={index} \n                                      value={obj.childNodes[2].childNodes[0].nodeValue}>\n                                          {obj.childNodes[0].childNodes[0].nodeValue} - {obj.childNodes[1].childNodes[0].nodeValue}\n                                      </option>)\n                             }); */\n          //                this.setState({ tabela: {tabela} });\n        });\n      }\n    };\n\n    this.state = {\n      nome: '',\n      cidades: '',\n      cidade: '',\n      cod: '',\n      erroMsg: ''\n    };\n  }\n\n  render() {\n    var cidades = this.state.cidades;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.fetchCidades,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 25\n      }\n    }, \"Nome:\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.value,\n      onChange: this.fetchCidades,\n      placeholder: \"digite o nome completo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 25\n      }\n    }, \"Cidades:\", /*#__PURE__*/React.createElement(\"select\", {\n      onChange: this.fetchClima,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 29\n      }\n    }, cidades))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }\n    }, this.state.erroMsg)));\n  }\n\n}","map":{"version":3,"sources":["/home/mauro/Área de Trabalho/Projeto07-ReactHTTP-Reques/atv-react/src/Form.js"],"names":["React","Form","Component","constructor","props","getTempo","sigla","formatData","data","d","split","fetchCidades","e","setState","nome","target","value","length","preventDefault","normalize","replace","erro","fetch","method","mode","headers","Headers","then","response","arrayBuffer","buffer","decoder","TextDecoder","decode","str","parser","window","DOMParser","xml","parseFromString","cidades","getElementsByTagName","ID","console","log","lista","push","childNodes","forEach","obj","index","nodeValue","catch","fetchClima","cidade","firstChild","textContent","UF","diaSearch","hoje","condhoje","maxhoje","minhoje","iuvHoje","amanha","condAmanha","maxAmanha","minAmanha","iuvAmanha","state","cod","erroMsg","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.css';\n\nexport default class Form extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nome: '',\n            cidades: '',\n            cidade: '',\n            cod: '',\n            erroMsg: ''\n        };\n    }\n\n    getTempo = sigla => {\n        return {\n            'ec': 'Encoberto com Chuvas Isoladas',\n            'ci': 'Chuvas Isoladas',\n            'c': 'Chuva',\n            'in': 'Instável',\n            'pp': 'Poss. de Pancadas de Chuva',\n            'cm': 'Chuva pela Manhã',\n            'cn': 'Chuva a Noite',\n            'pt': 'Pancadas de Chuva a Tarde',\n            'pm': 'Pancadas de Chuva pela Manhã',\n            'np': 'Nublado e Pancadas de Chuva',\n            'pc': 'Pancadas de Chuva',\n            'pn': 'Parcialmente Nublado',\n            'cv': 'Chuvisco',\n            'ch': 'Chuvoso',\n            't': 'Tempestade',\n            'ps': 'Predomínio de Sol',\n            'e': 'Encoberto',\n            'n': 'Nublado',\n            'cl': 'Céu Claro',\n            'nv': 'Nevoeiro',\n            'g': 'Geada',\n            'ne': 'Neve',\n            'nd': 'Não Definido',\n            'pnt': 'Pancadas de Chuva a Noite',\n            'psc': 'Possibilidade de Chuva',\n            'pcm': 'Possibilidade de Chuva pela Manhã',\n            'pct': 'Possibilidade de Chuva a Tarde',\n            'pcn': 'Possibilidade de Chuva a Noite',\n            'npt': 'Nublado com Pancadas a Tarde',\n            'npn': 'Nublado com Pancadas a Noite',\n            'ncn': 'Nublado com Poss. de Chuva a Noite',\n            'nct': 'Nublado com Poss. de Chuva a Tarde',\n            'ncm': 'Nubl. c/ Poss. de Chuva pela Manhã',\n            'npm': 'Nublado com Pancadas pela Manhã',\n            'npp': 'Nublado com Possibilidade de Chuva',\n            'vn': 'Variação de Nebulosidade',\n            'ct': 'Chuva a Tarde',\n            'ppn': 'Poss. de Panc. de Chuva a Noite',\n            'ppt': 'Poss. de Panc. de Chuva a Tarde',\n            'ppm': 'Poss. de Panc. de Chuva pela Manhã'\n        }[sigla];\n    }\n\n    formatData = data => {\n        let d = data.split('-');\n        return d[2] + '/' + d[1] + '/' + d[0];\n    }\n\n    fetchCidades = e => {\n        this.setState({\n            nome: e.target.value\n        });\n        if (e.target.value.length >= 3) {\n            e.preventDefault();\n            let nome = e.target.value.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\n            this.setState({ erro: '' });\n            fetch(`http://servicos.cptec.inpe.br/XML/listaCidades?city=${nome}`, { method: \"GET\" }, {\n                mode: 'cors',\n                method: 'GET',\n                headers: new Headers({\n                    'Accept': 'application/xml',\n                    'content-type': 'application/x-www-form-urlencoded',\n                    'Access-Control-Allow-Origin': '*',\n                    'Access-Control-Allow-Methods': 'GET, POST, PUT',\n                    'Access-Control-Allow-Headers': 'Content-Type',\n                })\n            })\n                .then(response => response.arrayBuffer())\n                .then(buffer => {\n                    let decoder = new TextDecoder(\"iso-8859-1\");\n                    return decoder.decode(buffer);\n                })\n                .then(str => { // console.log(str);\n                    let parser = new window.DOMParser()\n                    let xml = parser.parseFromString(str, \"text/xml\");\n                    let cidades = xml.getElementsByTagName('cidades')[0]; // Obter a tag cidades\n                    let ID = xml.getElementsByTagName('id')[0];\n                    console.log(ID);\n                    let lista = [];\n                    lista.push(<option key='-i' value='' >Selecione</option>)\n                    cidades.childNodes.forEach((obj, index) => {\n                        return lista.push(<option key={index} value={obj.childNodes[2].childNodes[0].nodeValue}>{obj.childNodes[0].childNodes[0].nodeValue} - {obj.childNodes[1].childNodes[0].nodeValue}</option>)\n                    });\n                    this.setState({ cidades: lista })\n                })\n                .catch(erro => console.log(erro));\n        }\n    }\n\n    fetchClima = e => { console.log(e.target.value)\n        if (e.target.value !== '') {\n            fetch(`http://servicos.cptec.inpe.br/XML/cidade/${e.target.value}/previsao.xml`, { method: 'GET' })\n                .then(response => response.arrayBuffer())\n                .then(buffer => {\n                    let decoder = new TextDecoder(\"iso-8859-1\");\n                    return decoder.decode(buffer);\n                })\n                .then(str => { // console.log(str);\n                    let parser = new window.DOMParser()\n                    let xml = parser.parseFromString(str, \"text/xml\");\n//                     console.log(xml);\n                    var cidade = xml.getElementsByTagName('nome')[0].firstChild.textContent;\n                    console.log(\"cidade \"+cidade);\n                    let UF = xml.getElementsByTagName('uf')[0].firstChild.textContent;\n                    console.log(\"UF \"+ UF);\n                    let diaSearch = this.formatData(xml.getElementsByTagName('atualizacao')[0].firstChild.textContent);\n                    console.log(\"Dia \"+ diaSearch);\n                    let hoje = this.formatData(xml.getElementsByTagName('previsao')[0].getElementsByTagName('dia')[0].firstChild.nodeValue);\n                    console.log(\"Hoje \"+ hoje);\n                    let condhoje = this.getTempo(xml.getElementsByTagName('previsao')[0].getElementsByTagName('tempo')[0].firstChild.nodeValue);\n                    console.log(\"condhoje \"+ condhoje);\n                    let maxhoje = xml.getElementsByTagName('previsao')[0].getElementsByTagName('maxima')[0].firstChild.nodeValue;\n                    console.log(\"max \"+ maxhoje);\n                    let minhoje = xml.getElementsByTagName('previsao')[0].getElementsByTagName('minima')[0].firstChild.nodeValue;\n                    console.log(\"min \"+ minhoje);   \n                    let iuvHoje = xml.getElementsByTagName('previsao')[0].getElementsByTagName('iuv')[0].firstChild.nodeValue;\n                    console.log(\"iuv \"+ iuvHoje);                       \n                    let amanha = xml.getElementsByTagName('previsao')[1].getElementsByTagName('dia')[0].firstChild.nodeValue;\n                    console.log(\"amanhã \"+ amanha);\n                    let condAmanha = this.getTempo(xml.getElementsByTagName('previsao')[0].getElementsByTagName('tempo')[0].firstChild.nodeValue);\n                    console.log(\"condAmanhã \"+ condAmanha);\n                    let maxAmanha = xml.getElementsByTagName('previsao')[0].getElementsByTagName('maxima')[0].firstChild.nodeValue;\n                    console.log(\"max \"+ maxAmanha);\n                    let minAmanha = xml.getElementsByTagName('previsao')[0].getElementsByTagName('minima')[0].firstChild.nodeValue;\n                    console.log(\"min \"+ minAmanha);   \n                    let iuvAmanha = xml.getElementsByTagName('previsao')[0].getElementsByTagName('iuv')[0].firstChild.nodeValue;\n                    console.log(\"iuv \"+ iuvAmanha);                      \n                    \n/*                    condicao.childNodes.forEach((obj, index) => {\n                        let lista = [];\n                        lista.push(\n                            <option key={index} \n                            value={obj.childNodes[2].childNodes[0].nodeValue}>\n                                {obj.childNodes[0].childNodes[0].nodeValue} - {obj.childNodes[1].childNodes[0].nodeValue}\n                            </option>)\n                   }); */\n                    //                this.setState({ tabela: {tabela} });\n                });\n        }\n    };\n\n    render() {\n        var cidades = this.state.cidades;\n        return (\n            <div>\n                <form onSubmit={this.fetchCidades} >\n                    <div>\n                        <label>Nome:\n                            <input type='text' value={this.state.value}\n                                onChange={this.fetchCidades}\n                                placeholder=\"digite o nome completo\"\n                            />\n                        </label>\n                    </div>\n                    <div>\n                        <label>Cidades:\n                            <select onChange={this.fetchClima}>\n                                { cidades }\n                            </select>\n                        </label>\n                    </div>\n                    <div>\n                        {this.state.erroMsg}\n                    </div>\n                </form>\n            </div>\n        );\n    }\n\n}\n                                      "]},"metadata":{},"sourceType":"module"}