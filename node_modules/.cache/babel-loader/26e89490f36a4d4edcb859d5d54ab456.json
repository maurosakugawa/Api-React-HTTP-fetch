{"ast":null,"code":"var _jsxFileName = \"/home/mauro/\\xC1rea de Trabalho/Projeto07-ReactHTTP-Reques/atv-react/src/Form.js\";\nimport React from 'react';\nexport default class Form extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getTempo = sigla => {\n      return {\n        'ec': 'Encoberto com Chuvas Isoladas',\n        'ci': 'Chuvas Isoladas',\n        'c': 'Chuva',\n        'in': 'Instável',\n        'pp': 'Poss. de Pancadas de Chuva',\n        'cm': 'Chuva pela Manhã',\n        'cn': 'Chuva a Noite',\n        'pt': 'Pancadas de Chuva a Tarde',\n        'pm': 'Pancadas de Chuva pela Manhã',\n        'np': 'Nublado e Pancadas de Chuva',\n        'pc': 'Pancadas de Chuva',\n        'pn': 'Parcialmente Nublado',\n        'cv': 'Chuvisco',\n        'ch': 'Chuvoso',\n        't': 'Tempestade',\n        'ps': 'Predomínio de Sol',\n        'e': 'Encoberto',\n        'n': 'Nublado',\n        'cl': 'Céu Claro',\n        'nv': 'Nevoeiro',\n        'g': 'Geada',\n        'ne': 'Neve',\n        'nd': 'Não Definido',\n        'pnt': 'Pancadas de Chuva a Noite',\n        'psc': 'Possibilidade de Chuva',\n        'pcm': 'Possibilidade de Chuva pela Manhã',\n        'pct': 'Possibilidade de Chuva a Tarde',\n        'pcn': 'Possibilidade de Chuva a Noite',\n        'npt': 'Nublado com Pancadas a Tarde',\n        'npn': 'Nublado com Pancadas a Noite',\n        'ncn': 'Nublado com Poss. de Chuva a Noite',\n        'nct': 'Nublado com Poss. de Chuva a Tarde',\n        'ncm': 'Nubl. c/ Poss. de Chuva pela Manhã',\n        'npm': 'Nublado com Pancadas pela Manhã',\n        'npp': 'Nublado com Possibilidade de Chuva',\n        'vn': 'Variação de Nebulosidade',\n        'ct': 'Chuva a Tarde',\n        'ppn': 'Poss. de Panc. de Chuva a Noite',\n        'ppt': 'Poss. de Panc. de Chuva a Tarde',\n        'ppm': 'Poss. de Panc. de Chuva pela Manhã'\n      }[sigla];\n    };\n\n    this.formatData = data => {\n      let d = data.split('-');\n      return d[2] + '/' + d[1] + '/' + d[0];\n    };\n\n    this.fetchCidades = e => {\n      this.setState({\n        nome: e.target.value\n      });\n\n      if (e.target.value.length >= 3) {\n        e.preventDefault();\n        let nome = e.target.value.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\n        this.setState({\n          erro: ''\n        });\n        fetch(`http://servicos.cptec.inpe.br/XML/listaCidades?city=${nome}`, {\n          method: \"GET\"\n        }, {\n          mode: 'no-cors',\n          //   mode: 'cors',\n          method: 'GET',\n          headers: new Headers({\n            'Accept': 'application/xml',\n            'content-type': 'application/x-www-form-urlencoded',\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET, POST, PUT',\n            'Access-Control-Allow-Headers': 'Content-Type'\n          })\n        }).then(response => response.arrayBuffer()).then(buffer => {\n          let decoder = new TextDecoder(\"iso-8859-1\");\n          return decoder.decode(buffer);\n        }).then(str => {\n          // console.log(str);\n          let parser = new window.DOMParser();\n          let xml = parser.parseFromString(str, \"text/xml\");\n          let cidades = xml.getElementsByTagName('cidades')[0]; // Obter a tag cidades\n\n          let lista = [];\n          lista.push( /*#__PURE__*/React.createElement(\"option\", {\n            key: \"-i\",\n            value: \"\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 32\n            }\n          }, \"Selecione uma cidade\"));\n          cidades.childNodes.forEach((obj, index) => {\n            return lista.push( /*#__PURE__*/React.createElement(\"option\", {\n              key: index,\n              value: obj.childNodes[2].childNodes[0].nodeValue,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 43\n              }\n            }, obj.childNodes[0].childNodes[0].nodeValue, \" - \", obj.childNodes[1].childNodes[0].nodeValue));\n          });\n          this.setState({\n            cidades: lista\n          });\n          console.log(typeof cidades);\n        }).catch(erro => console.log(erro));\n      }\n    };\n\n    this.fetchClima = e => {\n      if (e.target.value !== '') {\n        fetch(`http://servicos.cptec.inpe.br/XML/cidade/4963/previsao.xml`, {\n          method: 'GET'\n        }).then(response => response.arrayBuffer()).then(buffer => {\n          let decoder = new TextDecoder(\"iso-8859-1\");\n          return decoder.decode(buffer);\n        }).then(str => {\n          // console.log(str);\n          let parser = new window.DOMParser();\n          let xml = parser.parseFromString(str, \"text/xml\");\n          console.log(xml);\n          let cidade = xml.getElementsByTagName('nome')[0];\n          console.log(cidade);\n          let UF = xml.getElementsByTagName('uf')[0];\n          console.log(UF);\n          let diaSearch = xml.getElementsByTagName('atualizacao')[0];\n          console.log(diaSearch);\n          let prev = xml.getElementsByTagName('previsao')[0];\n          console.log(prev);\n          let lista = [];\n          var tabela = '';\n          tabela.push( /*#__PURE__*/React.createElement(\"thead\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 33\n            }\n          }, cidade, \" - \", UF, \" - \", diaSearch, \"}\"));\n          cidade.childNodes.forEach((obj, index) => {\n            lista.push( /*#__PURE__*/React.createElement(\"option\", {\n              key: index,\n              value: obj.childNodes[2].childNodes[0].nodeValue,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 35\n              }\n            }, obj.childNodes[0].childNodes[0].nodeValue, \" - \", obj.childNodes[1].childNodes[0].nodeValue));\n          });\n          this.setState({\n            tabela: {\n              tabela\n            }\n          });\n        });\n      }\n    };\n\n    this.state = {\n      nome: '',\n      cidades: '',\n      cidade: '',\n      previsao: '',\n      erroMsg: ''\n    };\n    this.fetchCidades = this.fetchCidades.bind(this);\n    this.fetchClima = this.fetchClima.bind(this);\n  }\n\n  render() {\n    var cidades = this.props.cidades; //       var fetchCidades = this.state.fetchCidades;\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.fetchCidades,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 29\n      }\n    }, \"Nome\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.nome,\n      onChange: e => this.setState({\n        nome: e.target.value\n      }),\n      placeholder: \"digite o nome completo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 29\n      }\n    }, \"Cidade\"), /*#__PURE__*/React.createElement(\"select\", {\n      onClick: this.fetchClima,\n      value: this.state.lista,\n      onChange: this.fetchCidades,\n      defaultValue: \"Selecione a cidade\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 35\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 25\n      }\n    }, this.state.erroMsg)));\n  }\n\n}","map":{"version":3,"sources":["/home/mauro/Área de Trabalho/Projeto07-ReactHTTP-Reques/atv-react/src/Form.js"],"names":["React","Form","Component","constructor","props","getTempo","sigla","formatData","data","d","split","fetchCidades","e","setState","nome","target","value","length","preventDefault","normalize","replace","erro","fetch","method","mode","headers","Headers","then","response","arrayBuffer","buffer","decoder","TextDecoder","decode","str","parser","window","DOMParser","xml","parseFromString","cidades","getElementsByTagName","lista","push","childNodes","forEach","obj","index","nodeValue","console","log","catch","fetchClima","cidade","UF","diaSearch","prev","tabela","state","previsao","erroMsg","bind","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\nexport default class Form extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nome: '',\n            cidades: '',\n            cidade: '',\n            previsao: '',\n            erroMsg: ''\n        };\n        this.fetchCidades = this.fetchCidades.bind(this);\n        this.fetchClima = this.fetchClima.bind(this);\n    }\n\n\n    getTempo = sigla => {\n        return {\n            'ec': 'Encoberto com Chuvas Isoladas',\n            'ci': 'Chuvas Isoladas',\n            'c': 'Chuva',\n            'in': 'Instável',\n            'pp': 'Poss. de Pancadas de Chuva',\n            'cm': 'Chuva pela Manhã',\n            'cn': 'Chuva a Noite',\n            'pt': 'Pancadas de Chuva a Tarde',\n            'pm': 'Pancadas de Chuva pela Manhã',\n            'np': 'Nublado e Pancadas de Chuva',\n            'pc': 'Pancadas de Chuva',\n            'pn': 'Parcialmente Nublado',\n            'cv': 'Chuvisco',\n            'ch': 'Chuvoso',\n            't': 'Tempestade',\n            'ps': 'Predomínio de Sol',\n            'e': 'Encoberto',\n            'n': 'Nublado',\n            'cl': 'Céu Claro',\n            'nv': 'Nevoeiro',\n            'g': 'Geada',\n            'ne': 'Neve',\n            'nd': 'Não Definido',\n            'pnt': 'Pancadas de Chuva a Noite',\n            'psc': 'Possibilidade de Chuva',\n            'pcm': 'Possibilidade de Chuva pela Manhã',\n            'pct': 'Possibilidade de Chuva a Tarde',\n            'pcn': 'Possibilidade de Chuva a Noite',\n            'npt': 'Nublado com Pancadas a Tarde',\n            'npn': 'Nublado com Pancadas a Noite',\n            'ncn': 'Nublado com Poss. de Chuva a Noite',\n            'nct': 'Nublado com Poss. de Chuva a Tarde',\n            'ncm': 'Nubl. c/ Poss. de Chuva pela Manhã',\n            'npm': 'Nublado com Pancadas pela Manhã',\n            'npp': 'Nublado com Possibilidade de Chuva',\n            'vn': 'Variação de Nebulosidade',\n            'ct': 'Chuva a Tarde',\n            'ppn': 'Poss. de Panc. de Chuva a Noite',\n            'ppt': 'Poss. de Panc. de Chuva a Tarde',\n            'ppm': 'Poss. de Panc. de Chuva pela Manhã'\n        }[sigla];\n    }\n\n    formatData = data => {\n        let d = data.split('-');\n        return d[2] + '/' + d[1] + '/' + d[0];\n    }\n\n    //    componentDidMount() {\n    fetchCidades = e => {\n        this.setState({\n            nome: e.target.value\n        });\n        if (e.target.value.length >= 3) {\n            e.preventDefault();\n            let nome = e.target.value.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\n            this.setState({ erro: '' });\n            fetch(`http://servicos.cptec.inpe.br/XML/listaCidades?city=${nome}`, { method: \"GET\" }, {\n                mode: 'no-cors',\n                //   mode: 'cors',\n                method: 'GET',\n                headers: new Headers({\n                    'Accept': 'application/xml',\n                    'content-type': 'application/x-www-form-urlencoded',\n                    'Access-Control-Allow-Origin': '*',\n                    'Access-Control-Allow-Methods': 'GET, POST, PUT',\n                    'Access-Control-Allow-Headers': 'Content-Type',\n                })\n            })\n                .then(response => response.arrayBuffer())\n                .then(buffer => {\n                    let decoder = new TextDecoder(\"iso-8859-1\");\n                    return decoder.decode(buffer);\n                })\n                .then(str => { // console.log(str);\n                    let parser = new window.DOMParser()\n                    let xml = parser.parseFromString(str, \"text/xml\");\n                    let cidades = xml.getElementsByTagName('cidades')[0]; // Obter a tag cidades\n                    let lista = [];\n                    lista.push(<option key='-i' value='' >Selecione uma cidade</option>)\n                    cidades.childNodes.forEach((obj, index) => {\n                        return lista.push(<option key={index} value={obj.childNodes[2].childNodes[0].nodeValue}>{obj.childNodes[0].childNodes[0].nodeValue} - {obj.childNodes[1].childNodes[0].nodeValue}</option>)\n                    });\n\n                    this.setState({cidades: lista})\n                    console.log(typeof(cidades));\n\n                })\n                .catch(erro => console.log(erro));\n        }\n    }\n\n\n\n    fetchClima = e => {\n        if (e.target.value !== '') {\n            fetch(`http://servicos.cptec.inpe.br/XML/cidade/4963/previsao.xml`, { method: 'GET' })\n                .then(response => response.arrayBuffer())\n                .then(buffer => {\n                    let decoder = new TextDecoder(\"iso-8859-1\");\n                    return decoder.decode(buffer);\n                })\n                .then(str => { // console.log(str);\n                    let parser = new window.DOMParser()\n                    let xml = parser.parseFromString(str, \"text/xml\");\n                    console.log(xml);\n                    let cidade = xml.getElementsByTagName('nome')[0];\n                    console.log(cidade);\n                    let UF = xml.getElementsByTagName('uf')[0];\n                    console.log(UF);\n                    let diaSearch = xml.getElementsByTagName('atualizacao')[0];\n                    console.log(diaSearch);\n                    let prev = xml.getElementsByTagName('previsao')[0];\n                    console.log(prev);\n                    let lista = [];\n                    var tabela = '';\n                    tabela.push(<thead>{cidade} - {UF} - {diaSearch}}</thead>)\n                    cidade.childNodes.forEach((obj, index) => {\n                       lista.push(<option key={index} value={obj.childNodes[2].childNodes[0].nodeValue}>{obj.childNodes[0].childNodes[0].nodeValue} - {obj.childNodes[1].childNodes[0].nodeValue}</option>)\n                    });\n\n                    this.setState({ tabela: {tabela} });\n                });\n            }\n        };\n\n        render(){\n\n            var cidades = this.props.cidades;\n     //       var fetchCidades = this.state.fetchCidades;\n            return (\n                <div>\n                    <form onSubmit={this.fetchCidades} >\n                        <div>\n                            <label>Nome</label>\n                            <input type='text' value={this.state.nome}\n                                onChange={e=>this.setState({nome:e.target.value})}\n                                placeholder=\"digite o nome completo\"\n                            />\n                            <label>Cidade</label>\n                            <select onClick={this.fetchClima} value={this.state.lista}\n                                onChange={this.fetchCidades} defaultValue=\"Selecione a cidade\" >\n                                  <option></option>\n                            </select>\n                        </div>\n                        <div>\n                            {this.state.erroMsg}\n                        </div>\n                    </form>\n                </div>\n            );\n        }\n    \n}\n\n"]},"metadata":{},"sourceType":"module"}